import { useState, useEffect } from 'react';
import axios from '../api/axiosConfig'; // Ensure this path is correct

/**
 * Custom hook to fetch graph data based on a selected requirement.
 * @param {object | null} selectedRequirement - The requirement object containing the text to analyze.
 * @returns {{graphResponses: Array<object>, loadingGraph: boolean, graphError: string, detailGraphIndex: number, setDetailGraphIndex: Function}}
 */
export function useGraphFetcher(selectedRequirement) {
    const [graphResponses, setGraphResponses] = useState([]);
    const [loadingGraph, setLoadingGraph] = useState(false);
    const [graphError, setGraphError] = useState("");
    const [detailGraphIndex, setDetailGraphIndex] = useState(0);

    useEffect(() => {
        const fetchGraphs = async () => {
            // Check if requirement text exists and is not just whitespace
            if (!selectedRequirement?.requirements?.trim()) {
                setGraphResponses([]);
                setGraphError(
                    selectedRequirement ? "No requirements text found for this file." : ""
                );
                setLoadingGraph(false);
                setDetailGraphIndex(0); // Reset index
                return;
            }

            setLoadingGraph(true);
            setGraphResponses([]);
            setGraphError("");
            setDetailGraphIndex(0); // Reset index on new fetch

            try {
                const payload = { requirement: selectedRequirement.requirements };
                const response = await axios.post("/analysis/graphs", payload);

                // Ensure response.data is an array before filtering
                const data = Array.isArray(response.data) ? response.data : [];
                const validGraphs = data.filter((g) => g && g.generated_code); // Filter out null/undefined graphs or those without code

                setGraphResponses(validGraphs);

                if (validGraphs.length === 0) {
                    // Check if the original response was empty or if filtering removed everything
                    if (data.length === 0) {
                         setGraphError("Analysis did not return any graph data.");
                    } else {
                         setGraphError("No valid graphs were generated by the analysis.");
                    }
                }
            } catch (error) {
                console.error("Error fetching graphs:", error);
                const errorMsg =
                    error.response?.data?.detail || // FastAPI error detail
                    error.message || // General JS error message
                    "An unknown server error occurred";
                setGraphError(`Failed to fetch graphs: ${errorMsg}`);
            } finally {
                setLoadingGraph(false);
            }
        };

        if (selectedRequirement) {
            fetchGraphs();
        } else {
            // Explicitly reset state when no requirement is selected
            setGraphResponses([]);
            setGraphError("");
            setLoadingGraph(false);
            setDetailGraphIndex(0);
        }
        // Dependency array includes the specific property used for fetching
    }, [selectedRequirement]);

    // Return state and the index setter
    return { graphResponses, loadingGraph, graphError, detailGraphIndex, setDetailGraphIndex };
}