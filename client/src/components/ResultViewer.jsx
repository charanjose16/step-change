import React, { useState, useEffect } from "react";
import Modal from "./Modal";
import axios from "../api/axiosConfig";
import FullScreenGraph from "./FullScreenGraph";
import RequirementListView from "./RequirementListView"; // Import new component
import RequirementDetailView from "./RequirementDetailView"; // Import new component
import { Loader2, AlertTriangle } from "lucide-react";

export default function ResultViewer({ isOpen, onClose }) {
    const [loadedRequirements, setLoadedRequirements] = useState(null); // Stores { files: [...] }
    const [loadError, setLoadError] = useState("");
    const [searchTerm, setSearchTerm] = useState("");
    const [currentPage, setCurrentPage] = useState(1);
    const requirementsPerPage = 4;
    const [selectedRequirement, setSelectedRequirement] = useState(null); // Stores the selected file object
    const [detailGraphIndex, setDetailGraphIndex] = useState(0);
    const [graphResponses, setGraphResponses] = useState([]); // Stores graph data for selected requirement
    const [loadingGraph, setLoadingGraph] = useState(false);
    const [graphError, setGraphError] = useState("");
    const [isFullScreen, setIsFullScreen] = useState(false);

    // --- Effects ---
    // Load data from localStorage when modal opens/isOpen changes
    useEffect(() => {
        if (isOpen) {
            // Reset state on open
            setLoadError("");
            setLoadedRequirements(null);
            setSelectedRequirement(null);
            setSearchTerm("");
            setCurrentPage(1);
            setIsFullScreen(false);
            setGraphResponses([]);
            setGraphError("");

            const storedResult = localStorage.getItem("requirementsOutput");
            if (storedResult) {
                try {
                    const parsedResult = JSON.parse(storedResult);
                    if (parsedResult && Array.isArray(parsedResult.requirements)) {
                        setLoadedRequirements({ files: parsedResult.requirements });
                    } else {
                        console.error("Stored data format invalid:", parsedResult);
                        setLoadError("Failed to load results: Invalid data format.");
                        localStorage.removeItem("requirementsOutput");
                    }
                } catch (e) {
                    console.error("Failed to parse stored results:", e);
                    setLoadError("Failed to load results: Could not parse data.");
                    localStorage.removeItem("requirementsOutput");
                }
            } else {
                setLoadError("No analysis results found in storage.");
            }
        }
    }, [isOpen]);

    // Fetch graphs when a requirement is selected
    useEffect(() => {
        const fetchGraphs = async () => {
            if (!selectedRequirement?.requirements?.trim()) {
                setGraphResponses([]);
                setGraphError(
                    selectedRequirement ? "No requirements text found for this file." : ""
                );
                setLoadingGraph(false);
                return;
            }

            setLoadingGraph(true);
            setGraphResponses([]);
            setGraphError("");
            try {
                const payload = { requirement: selectedRequirement.requirements };
                const response = await axios.post("/analysis/graphs", payload);
                const data = Array.isArray(response.data) ? response.data : [];
                const validGraphs = data.filter((g) => g && g.generated_code) || [];

                setGraphResponses(validGraphs);
                setDetailGraphIndex(0);

                if (validGraphs.length === 0) {
                    setGraphError("No valid graphs were generated by the analysis.");
                }
            } catch (error) {
                console.error("Error fetching graphs:", error);
                const errorMsg =
                    error.response?.data?.detail || error.message || "Server error";
                setGraphError(`Failed to fetch graphs: ${errorMsg}`);
            } finally {
                setLoadingGraph(false);
            }
        };

        if (selectedRequirement) {
            fetchGraphs();
        } else {
            setGraphResponses([]);
            setGraphError("");
            setLoadingGraph(false);
            setDetailGraphIndex(0);
        }
    }, [selectedRequirement]);

    // --- Data Processing ---
    const reqFiles = loadedRequirements?.files ?? [];
    const filteredRequirements = reqFiles.filter((file) => {
        const term = searchTerm.toLowerCase();
        const fileNameMatch = file.file_name?.toLowerCase().includes(term);
        return !!fileNameMatch;
    });

    const totalFilteredRequirements = filteredRequirements.length;
    const totalPages = Math.max(1, Math.ceil(totalFilteredRequirements / requirementsPerPage));
    const startIdx = (currentPage - 1) * requirementsPerPage;
    const pagedRequirements = filteredRequirements.slice(
        startIdx,
        startIdx + requirementsPerPage
    );

    // Adjust current page if it becomes invalid
    useEffect(() => {
        if (currentPage > totalPages) {
            setCurrentPage(totalPages);
        }
        if (currentPage > 1 && totalFilteredRequirements === 0) {
             setCurrentPage(1);
        }
    }, [totalPages, currentPage, totalFilteredRequirements]);

    // --- Event Handlers ---
    const handleSearchChange = (term) => {
        setSearchTerm(term);
        setCurrentPage(1); // Reset page on new search
    };

    const handlePageChange = (page) => {
        setCurrentPage(page);
    };

    const handleSelectRequirement = (req) => {
        setSelectedRequirement(req);
    };

    const handleGoBack = () => {
        setSelectedRequirement(null);
        // Optionally clear graph state here too if desired, though the effect handles it
    };

    const handleGraphIndexChange = (index) => {
        setDetailGraphIndex(index);
    };

    const handleFullscreen = () => {
        setIsFullScreen(true);
    };

    // --- Main Modal Content Determination ---
    let modalContent;
    if (loadError) {
        modalContent = (
            <div className="flex flex-col items-center justify-center py-12 text-center text-red-600">
                <AlertTriangle className="h-10 w-10 mb-3" />
                <h3 className="text-lg font-semibold mb-2">Error Loading Results</h3>
                <p className="text-sm">{loadError}</p>
                <button
                    onClick={onClose}
                    className="mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 text-sm"
                >
                    Close
                </button>
            </div>
        );
    } else if (!loadedRequirements) {
        modalContent = (
            <div className="flex items-center justify-center py-12 text-slate-600">
                <Loader2 className="h-8 w-8 animate-spin mr-3" />
                Loading results...
            </div>
        );
    } else if (selectedRequirement) {
        // Render Detail View
        modalContent = (
            <RequirementDetailView
                requirement={selectedRequirement}
                graphResponses={graphResponses}
                isLoadingGraph={loadingGraph}
                graphError={graphError}
                selectedGraphIndex={detailGraphIndex}
                onGraphIndexChange={handleGraphIndexChange}
                onGoBack={handleGoBack}
                onFullscreen={handleFullscreen}
            />
        );
    } else {
        // Render List View
        modalContent = (
            <RequirementListView
                requirements={pagedRequirements}
                totalFilteredRequirements={totalFilteredRequirements}
                searchTerm={searchTerm}
                onSearchChange={handleSearchChange}
                currentPage={currentPage}
                totalPages={totalPages}
                onPageChange={handlePageChange}
                onSelectRequirement={handleSelectRequirement}
                requirementsPerPage={requirementsPerPage}
                startIdx={startIdx}
            />
        );
    }

    // --- Fullscreen Logic ---
    const selectedGraphForFullscreen =
        graphResponses?.[detailGraphIndex]?.generated_code;
    const canShowFullscreen = isFullScreen && selectedGraphForFullscreen;

    // --- Final Render ---
    return (
        <>
            {/* Main Modal */}
            <Modal isOpen={isOpen && !isFullScreen} onClose={onClose}>
                 <div className="pt-4 pb-6 px-6 flex flex-col h-full max-h-[85vh]">
                    <h2 className="text-xl font-bold text-slate-800 mb-5 border-b pb-3 flex-shrink-0">
                        File Requirements Analysis
                    </h2>
                    <div className="flex-1 overflow-y-auto pr-2">
                        {modalContent}
                    </div>
                </div>
            </Modal>

            {/* Fullscreen Graph Viewer */}
            {canShowFullscreen && (
                <FullScreenGraph
                    chart={selectedGraphForFullscreen}
                    onClose={() => setIsFullScreen(false)}
                />
            )}
        </>
    );
}